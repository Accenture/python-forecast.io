{"name":"Python-forecast.io","tagline":"A thin Python Wrapper for the Forecast.io weather API","body":"This is a wrapper for the forecast.io API. It allows you to get the weather for any location, now, in the past, or future.\r\n\r\nThe Basic Use section covers enough to get you going. I suggest also reading the source if you want to know more about how to use the wrapper or what its doing (it’s very simple).\r\n\r\nRecent Changes\r\n--------------\r\n\r\n-   python-forecastio is now available on PyPI.\r\n-   [Requests][] is now used for HTTP/S requests. The main advantages are HTTPS support and GZip compression\r\n-   Updates to the way load\\_forecast is used. This should make it easier to keep track of the state of your Forecast objects.\r\n\r\nInstallation\r\n------------\r\n\r\nYou can now use pip to install python-forecastio. To install `pip install python-forecastio` to remove `pip uninstall python-forecastio`\r\n\r\nIf you choose to install python-forecastio manually, it depends on the requests library (<http://docs.python-requests.org>)\r\n\r\nRequirements\r\n------------\r\n\r\n-   You need an API key to use it (<http://developer.forecast.io>). Don’t worry a key is free.\r\n\r\nBasic Use\r\n---------\r\n\r\nAlthough you don’t need to know anything about the forecast.io API to use this module, their docs are available at <http://developer.forecast.io>\r\n\r\nTo use the wrapper:\r\n\r\n``` sourceCode\r\nimport forecastio\r\n\r\napi_key = \"YOUR API KEY\"\r\nlat = -31.967819\r\nlng = 115.87718\r\n\r\nforecast = forecastio.load_forecast(api_key, lat, lng)\r\n...\r\n```\r\n\r\nThe `load_forecast()` method has a few optional parameters. Providing your API key, a latitude and longitude are the only required parameters.\r\n\r\nUse the `forecast.DataBlockType()` eg. `currently()`, `daily()`, `hourly()`, `minutely()` methods to load the data you are after.\r\n\r\nThese methods return a DataBlock. Except `currently()` which returns a DataPoint.\r\n\r\n``` sourceCode\r\nbyHour = forecast.hourly()\r\nprint byHour.summary\r\nprint byHour.icon\r\n```\r\n\r\nThe .data attributes for each DataBlock is a list of DataPoint objects. This is where all the good data is :)\r\n\r\n``` sourceCode\r\nfor hourlyData in byHour.data:\r\n    print hourlyData.temperature\r\n```\r\n\r\nAdvanced\r\n========\r\n\r\nforecastio.load\\_forecast(key, latitude, longitude)\r\n---------------------------------------------------\r\n\r\nThis makes an API request and returns a **Forecast** object (see below).\r\n\r\nParameters:  \r\n-   **key** - Your API key from <https://developer.forecast.io/>\r\n-   **latitude** - The latitude of the location for the forecast\r\n-   **longitude** - The longitude of the location for the forecast\r\n-   **time** - (optional) A datetime object for the forecast either in the past or future\r\n-   **units** - (optional) A string of the preferred units of measurement, “auto” is the default. “us”,“ca”,“uk”,“si” are also available. See the API Docs <https://developer.forecast.io/docs/v2> for exactly what each unit means.\r\n-   **lazy** - (optional) Defaults to false. If true the function will request the json data as it is needed. Results in more requests, but maybe a faster response time.\r\n-   **callback** - (optional) Pass a function to be used as a callback. If used, load\\_forecast() will use an asynchronous HTTP call and **will not return the forecast object directly**, instead it will be passed to the callback function. Make sure it can accept it.\r\n\r\n------------------------------------------------------------------------\r\n\r\n*class* forecastio.models.Forecast\r\n----------------------------------\r\n\r\nThe **Forecast** object, it contains both weather data and the HTTP response from forecast.io\r\n\r\n**Attributes**  \r\n-   **response**  \r\n    -   The Response object returned from requests request.get() method. See <https://requests.readthedocs.org/en/latest/api/#requests.Response>\r\n\r\n-   **http\\_headers**  \r\n    -   A dictionary of response headers. ‘X-Forecast-API-Calls’ might be of interest, it contains the number of API calls made by the given API key for today.\r\n\r\n-   **json**  \r\n    -   A dictionary containing the json data returned from the API call.\r\n\r\n**Methods**  \r\n-   **currently()**  \r\n    -   Returns a ForecastioDataPoint object\r\n\r\n-   **minutely()**  \r\n    -   Returns a ForecastioDataBlock object\r\n\r\n-   **hourly()**  \r\n    -   Returns a ForecastioDataBlock object\r\n\r\n-   **daily()**  \r\n    -   Returns a ForecastioDataBlock object\r\n\r\n-   **update()**  \r\n    -   Refreshes the forecast data by making a new request.\r\n\r\n------------------------------------------------------------------------\r\n\r\n*class* forecastio.models.ForecastioDataBlock\r\n---------------------------------------------\r\n\r\nContains data about a forecast over time.\r\n\r\n**Attributes** *(descriptions taken from the forecast.io website)*  \r\n-   **summary**  \r\n    -   A human-readable text summary of this data block.\r\n\r\n-   **icon**  \r\n    -   A machine-readable text summary of this data block.\r\n\r\n-   **data**  \r\n    -   An array of **ForecastioDataPoint** objects (see below), ordered by time, which together describe the weather conditions at the requested location over time.\r\n\r\n------------------------------------------------------------------------\r\n\r\n*class* forecastio.models.ForecastioDataPoint\r\n=============================================\r\n\r\nContains data about a forecast at a particular time.\r\n\r\nData points have many attributes, but **not all of them are always available**. Some commonly used ones are:\r\n\r\n**Attributes** *(descriptions taken from the forecast.io website)*  \r\n-   **summary**\r\n    - A human-readable text summary of this data block.\r\n-   **icon**\r\n    - A machine-readable text summary of this data block.\r\n-   **time**\r\n    - The time at which this data point occurs.\r\n-   **temperature**\r\n    - (not defined on daily data points): A numerical value representing the temperature at the given time.\r\n-   **precipProbability**\r\n    -   A numerical value between 0 and 1 (inclusive) representing the probability of precipitation occurring at the given time.\r\n\r\nFor a full list of ForecastioDataPoint attributes and attribute descriptions, take a look at the forecast.io data point documentation (<https://developer.forecast.io/docs/v2#data-points>)\r\n\r\n\r\nProjects Using This Library\r\n---------------------------\r\n\r\n> -   [Biodata.io][]\r\n\r\nIf you use this wrapper for something cool, send me and email and I will include your project.\r\n\r\n  [image]: https://travis-ci.org/ZeevG/python-forecast.io.svg?branch=master\r\n  [Biodata.io]: http://biodata.io\r\n  [Requests]: http://docs.python-requests.org/en/latest/","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}